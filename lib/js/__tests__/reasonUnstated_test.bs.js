// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/lib/js/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonUnstated = require("../src/reasonUnstated.bs.js");
var ReactHooks = require("@testing-library/react-hooks");

function useCounter(initial) {
  var match = React.useState((function () {
          return initial;
        }));
  var set = match[1];
  return /* record */[
          /* count */match[0],
          /* set */set,
          /* inc */(function (param) {
              return Curry._1(set, (function (prev) {
                            return prev + 1 | 0;
                          }));
            }),
          /* dec */(function (param) {
              return Curry._1(set, (function (prev) {
                            return prev - 1 | 0;
                          }));
            })
        ];
}

var CounterContainer = ReasonUnstated.MakeContainer(/* module */[/* useHook */useCounter]);

function ReasonUnstated_test$App(Props) {
  var children = Props.children;
  return React.createElement(CounterContainer[/* Provider */0][/* make */1], {
              initialState: 0,
              children: children
            });
}

var App = /* module */[/* make */ReasonUnstated_test$App];

Jest.describe("useContext", (function (param) {
        var options = {
          wrapper: ReasonUnstated_test$App
        };
        var partial_arg = CounterContainer[/* useContainer */1];
        var container = ReactHooks.renderHook(Curry.__1(partial_arg), options);
        Jest.test("counter is 0", (function (param) {
                return Jest.Expect[/* toEqual */12](0, Jest.Expect[/* expect */0](container.result.current[/* count */0]));
              }));
        Jest.test("counter is 1", (function (param) {
                ReactHooks.act((function () {
                        return Curry._1(container.result.current[/* set */1], (function (prev) {
                                      return prev + 1 | 0;
                                    }));
                      }));
                return Jest.Expect[/* toEqual */12](1, Jest.Expect[/* expect */0](container.result.current[/* count */0]));
              }));
        return Jest.test("counter is 2", (function (param) {
                      ReactHooks.act((function () {
                              return Curry._1(container.result.current[/* set */1], (function (prev) {
                                            return prev + 1 | 0;
                                          }));
                            }));
                      return Jest.Expect[/* toEqual */12](2, Jest.Expect[/* expect */0](container.result.current[/* count */0]));
                    }));
      }));

exports.useCounter = useCounter;
exports.CounterContainer = CounterContainer;
exports.App = App;
/* CounterContainer Not a pure module */
